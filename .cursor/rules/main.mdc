---
description:
globs:
alwaysApply: true
---

---

## alwaysApply: true

- don't break stuff
- do not comment each step.
- don't delete my db, auth, or keys
- keep the logic clean
- no surprise patterns
- make me filthy rich
- do not comment each step
- Act as senior dev: only core, only must-have, minimum code
- Avoid unnecessary things, explain only the essence

## General rules

- Use **Next.js App Router** with TypeScript
- **Tailwind CSS** for styles (no inline-style)
- **shadcn/ui** for UI components (button, input, table, card, toast)
- Icons only from **lucide-react**
- Validate forms through **zod**
- Implement auth and protected routes through **Supabase**
- Place API in `/app/api/.../route.ts` (Next.js convention)
- Use `async/await`, no `.then()`
- Pages `/app/*` are server components by default; `use client` only where needed
- Always extract data through server actions or Supabase client

---

## API handlers (`/app/api/**/route.ts`)

- Export only `GET/POST/PUT/DELETE` functions
- Responses through `Response.json()`
- Validate input data through `zod`
- Use `supabase` from `/lib/supabase.ts`
- Don't embed business logic in `route.ts` â€” only simple operations

---

## UI components (`/components/**/*.tsx`)

- Use **shadcn/ui** as base
- Tailwind for layout (padding, margin, flex, grid)
- Components: either pure UI or marked with `use client`
- Supabase/DB logic forbidden in UI
- Icons through `lucide-react`

---

## Database schema interaction (`/lib/**/*.ts`)

- Supabase/DB interaction only through `/lib`
- Create typed helpers (`getDirectories()`, `createLead()`)
- Use **Supabase types** (generated by CLI) for safe queries
- SQL queries forbidden in components or `route.ts`

---

Never fix .env.local and .env keys

---

Always respond in English

Don't need to build project (npm run build) after fixing errors or integration

User always keeps npm run dev running, so don't need to start it.

don't explain what you are doing, just do what I asked you
